#!/usr/bin/env python
# sudo pip install scapy_http
# Make sure a packet capture software is installed


import RPi.GPIO as GPIO
import time
import scapy.all as scapy
from scapy import DHCP, ARP, BOOTP, Ether, UDP, IP

def sniff(interface):
	# iface  - choose interface
	# store  - decide whether or not to store packets in memory
	# prn    - specify call-back function
	# filter - allows us to filter packets using the Berkley Packet Filter (BPF) syntax
	scapy.sniff(iface=interface, store=False, prn=process_sniffed_packet, filter="arp or (udp and (port 67 or 68))")   


def process_sniffed_packet(packet):
    if DHCP in packet and packet[DHCP].options[0][1] == 3:
        MAC = packet[Ether].src
        print(f"DHCPREQUEST detected from {MAC}")
        print(packet.show())
        reputation = mac_Check(MAC)


def mac_check(MAC):
    if MAC in safe_mac:
        print(f"MAC address {MAC} is safe.")
        break
    else:
        print(f"MAC address {MAC} is unknown. Initiating defense systems.")
        LED(MAC)

def LED(MAC):
    if LED == True:
        print("LED is already on.")
        break
    else:
        LED = True
        print(f"Unknown MAC {MAC} detected. Turning on LED")
        # Initiates LED output
        GPIO.output(17, True)

# Sets Common GPIO Mode
GPIO.setmode(GPIO.BCM)

# Sets Pin 17 For Output
GPIO.setup(17, GPIO.OUT)

safe_mac = ("70:85:C2:54:98:4F", "40:4E:36:83:F9:C5", "90:32:4B:65:9E:51", "50:DC:E7:BE:99:7D", "98:29:A6:D0:B3:A3")

LED = False

sniff("etho0")

